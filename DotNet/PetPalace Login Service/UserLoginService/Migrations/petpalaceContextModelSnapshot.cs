// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserLoginService.Models;

#nullable disable

namespace UserLoginService.Migrations
{
    [DbContext(typeof(petpalaceContext))]
    partial class petpalaceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("UserLoginService.Models.Breed", b =>
                {
                    b.Property<int>("BreedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BreedID");

                    b.Property<string>("BreedName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PetTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PetTypeID");

                    b.HasKey("BreedId");

                    b.HasIndex(new[] { "BreedName" }, "BreedName")
                        .IsUnique();

                    b.HasIndex(new[] { "PetTypeId" }, "PetTypeID");

                    b.ToTable("breeds", (string)null);
                });

            modelBuilder.Entity("UserLoginService.Models.Buyer", b =>
                {
                    b.Property<int>("BuyerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BuyerID");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("BuyerName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("BuyerId");

                    b.HasIndex(new[] { "UserId" }, "UserID");

                    b.ToTable("buyer", (string)null);
                });

            modelBuilder.Entity("UserLoginService.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("UserLoginService.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CityId");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("UserLoginService.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int")
                        .HasColumnName("BuyerID");

                    b.Property<DateTime?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("OrderId");

                    b.HasIndex(new[] { "BuyerId" }, "BuyerID");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("UserLoginService.Models.Orderitem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderItemID");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SupplyId")
                        .HasColumnType("int")
                        .HasColumnName("SupplyID");

                    b.HasKey("OrderItemId");

                    b.HasIndex(new[] { "OrderId" }, "OrderID");

                    b.HasIndex(new[] { "SupplyId" }, "SupplyID");

                    b.ToTable("orderitems", (string)null);
                });

            modelBuilder.Entity("UserLoginService.Models.Pet", b =>
                {
                    b.Property<int>("PetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PetID");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("BreedId")
                        .HasColumnType("int")
                        .HasColumnName("BreedID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("enum('Male','Female')");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PetTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PetTypeID");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnName("SellerID");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('Available','Adopted')")
                        .HasDefaultValueSql("'Available'");

                    b.HasKey("PetId");

                    b.HasIndex(new[] { "BreedId" }, "BreedID");

                    b.HasIndex(new[] { "PetTypeId" }, "PetTypeID")
                        .HasDatabaseName("PetTypeID1");

                    b.HasIndex(new[] { "SellerId" }, "SellerID");

                    b.ToTable("pets", (string)null);
                });

            modelBuilder.Entity("UserLoginService.Models.Petclinic", b =>
                {
                    b.Property<int>("ClinicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClinicID");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ClinicId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CityId" }, "CityID");

                    b.ToTable("petclinics", (string)null);
                });

            modelBuilder.Entity("UserLoginService.Models.Petsupply", b =>
                {
                    b.Property<int>("SupplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplyID");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SupplyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SupplyId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryId" }, "CategoryID");

                    b.ToTable("petsupplies", (string)null);
                });

            modelBuilder.Entity("UserLoginService.Models.Pettype", b =>
                {
                    b.Property<int>("PetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PetTypeID");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PetTypeId");

                    b.HasIndex(new[] { "TypeName" }, "TypeName")
                        .IsUnique();

                    b.ToTable("pettypes", (string)null);
                });

            modelBuilder.Entity("UserLoginService.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoleId");

                    b.HasIndex(new[] { "RoleName" }, "RoleName")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("UserLoginService.Models.Seller", b =>
                {
                    b.Property<int>("SellerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SellerID");

                    b.Property<string>("SellerName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("SellerId");

                    b.HasIndex(new[] { "UserId" }, "UserID")
                        .HasDatabaseName("UserID1");

                    b.ToTable("seller", (string)null);
                });

            modelBuilder.Entity("UserLoginService.Models.Sellerproduct", b =>
                {
                    b.Property<int>("SellerProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SellerProductID");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int")
                        .HasColumnName("SellerID");

                    b.Property<int>("SupplyId")
                        .HasColumnType("int")
                        .HasColumnName("SupplyID");

                    b.HasKey("SellerProductId");

                    b.HasIndex(new[] { "SellerId" }, "SellerID")
                        .HasDatabaseName("SellerID1");

                    b.HasIndex(new[] { "SupplyId" }, "SupplyID")
                        .HasDatabaseName("SupplyID1");

                    b.ToTable("sellerproducts", (string)null);
                });

            modelBuilder.Entity("UserLoginService.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("AadharNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<sbyte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'1'");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "Email" }, "Email")
                        .IsUnique();

                    b.HasIndex(new[] { "RoleId" }, "RoleID");

                    b.HasIndex(new[] { "Username" }, "Username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("UserLoginService.Models.Breed", b =>
                {
                    b.HasOne("UserLoginService.Models.Pettype", "PetType")
                        .WithMany("Breeds")
                        .HasForeignKey("PetTypeId")
                        .HasConstraintName("breeds_ibfk_1");

                    b.Navigation("PetType");
                });

            modelBuilder.Entity("UserLoginService.Models.Buyer", b =>
                {
                    b.HasOne("UserLoginService.Models.User", "User")
                        .WithMany("Buyers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("buyer_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserLoginService.Models.Order", b =>
                {
                    b.HasOne("UserLoginService.Models.Buyer", "Buyer")
                        .WithMany("Orders")
                        .HasForeignKey("BuyerId")
                        .IsRequired()
                        .HasConstraintName("orders_ibfk_1");

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("UserLoginService.Models.Orderitem", b =>
                {
                    b.HasOne("UserLoginService.Models.Order", "Order")
                        .WithMany("Orderitems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("orderitems_ibfk_1");

                    b.HasOne("UserLoginService.Models.Petsupply", "Supply")
                        .WithMany("Orderitems")
                        .HasForeignKey("SupplyId")
                        .IsRequired()
                        .HasConstraintName("orderitems_ibfk_2");

                    b.Navigation("Order");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("UserLoginService.Models.Pet", b =>
                {
                    b.HasOne("UserLoginService.Models.Breed", "Breed")
                        .WithMany("Pets")
                        .HasForeignKey("BreedId")
                        .HasConstraintName("pets_ibfk_2");

                    b.HasOne("UserLoginService.Models.Pettype", "PetType")
                        .WithMany("Pets")
                        .HasForeignKey("PetTypeId")
                        .HasConstraintName("pets_ibfk_1");

                    b.HasOne("UserLoginService.Models.Seller", "Seller")
                        .WithMany("Pets")
                        .HasForeignKey("SellerId")
                        .HasConstraintName("pets_ibfk_3");

                    b.Navigation("Breed");

                    b.Navigation("PetType");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("UserLoginService.Models.Petclinic", b =>
                {
                    b.HasOne("UserLoginService.Models.City", "City")
                        .WithMany("Petclinics")
                        .HasForeignKey("CityId")
                        .HasConstraintName("petclinics_ibfk_1");

                    b.Navigation("City");
                });

            modelBuilder.Entity("UserLoginService.Models.Petsupply", b =>
                {
                    b.HasOne("UserLoginService.Models.Category", "Category")
                        .WithMany("Petsupplies")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("petsupplies_ibfk_1");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("UserLoginService.Models.Seller", b =>
                {
                    b.HasOne("UserLoginService.Models.User", "User")
                        .WithMany("Sellers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("seller_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserLoginService.Models.Sellerproduct", b =>
                {
                    b.HasOne("UserLoginService.Models.Seller", "Seller")
                        .WithMany("Sellerproducts")
                        .HasForeignKey("SellerId")
                        .IsRequired()
                        .HasConstraintName("sellerproducts_ibfk_1");

                    b.HasOne("UserLoginService.Models.Petsupply", "Supply")
                        .WithMany("Sellerproducts")
                        .HasForeignKey("SupplyId")
                        .IsRequired()
                        .HasConstraintName("sellerproducts_ibfk_2");

                    b.Navigation("Seller");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("UserLoginService.Models.User", b =>
                {
                    b.HasOne("UserLoginService.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("users_ibfk_1");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UserLoginService.Models.Breed", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("UserLoginService.Models.Buyer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("UserLoginService.Models.Category", b =>
                {
                    b.Navigation("Petsupplies");
                });

            modelBuilder.Entity("UserLoginService.Models.City", b =>
                {
                    b.Navigation("Petclinics");
                });

            modelBuilder.Entity("UserLoginService.Models.Order", b =>
                {
                    b.Navigation("Orderitems");
                });

            modelBuilder.Entity("UserLoginService.Models.Petsupply", b =>
                {
                    b.Navigation("Orderitems");

                    b.Navigation("Sellerproducts");
                });

            modelBuilder.Entity("UserLoginService.Models.Pettype", b =>
                {
                    b.Navigation("Breeds");

                    b.Navigation("Pets");
                });

            modelBuilder.Entity("UserLoginService.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("UserLoginService.Models.Seller", b =>
                {
                    b.Navigation("Pets");

                    b.Navigation("Sellerproducts");
                });

            modelBuilder.Entity("UserLoginService.Models.User", b =>
                {
                    b.Navigation("Buyers");

                    b.Navigation("Sellers");
                });
#pragma warning restore 612, 618
        }
    }
}
